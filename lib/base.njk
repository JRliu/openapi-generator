import * as qs from 'query-string';

export function joinQuery(data{{ ": { [x: string]: any }" if genType === "ts" }}){{ ": string" if genType === "ts" }} {
  const s = qs.stringify(data, { arrayFormat: 'bracket' });
  return s ? '?' + s : s;
}

{% if genType === "ts" %}
export interface RequestProps {
  method?: 'get' | 'post' | 'put' | 'delete';
  url: string;
  data?: any;
}
{% endif %}

export default class Base {
  {{ "protected" if genType === "ts" }}async request(props{{ ": RequestProps" if genType === "ts" }}) {
    let url = props.url;
    let body{{ ": any" if genType === "ts" }};
    if (props.data) {
      if (props.method === 'get' || props.method === 'delete') {
        url += joinQuery(props.data);
      } else {
        body = props.data;
      }
    }
    const fetchOpt{{ ": Request" if genType === "ts" }} = {
      url,
      method: props.method,
    };
    if (body) {
      fetchOpt.body = body;
    }
    return fetch(url, fetchOpt)
      .then((res) => {
        return res.json();
      }).catch((err) => {
        message.warn(err.message, 2000);
      });
  }
}
